"use strict";(self.webpackChunkthree_ez_doc=self.webpackChunkthree_ez_doc||[]).push([[1535],{4137:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},m="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=d(n),N=r,c=m["".concat(o,".").concat(N)]||m[N]||k[N]||i;return n?a.createElement(c,l(l({ref:t},s),{},{components:n})):a.createElement(c,l({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=N;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[m]="string"==typeof e?e:r,l[1]=p;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},1656:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>k,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var a=n(7462),r=(n(7294),n(4137));const i={id:"Utils.IntersectionUtils",title:"Class: IntersectionUtils",sidebar_label:"IntersectionUtils",custom_edit_url:null},l=void 0,p={unversionedId:"api/classes/Utils.IntersectionUtils",id:"api/classes/Utils.IntersectionUtils",title:"Class: IntersectionUtils",description:"Utils.IntersectionUtils",source:"@site/docs/api/classes/Utils.IntersectionUtils.md",sourceDirName:"api/classes",slug:"/api/classes/Utils.IntersectionUtils",permalink:"/three.ez/docs/api/classes/Utils.IntersectionUtils",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"Utils.IntersectionUtils",title:"Class: IntersectionUtils",sidebar_label:"IntersectionUtils",custom_edit_url:null},sidebar:"apiSidebar",previous:{title:"Asset",permalink:"/three.ez/docs/api/classes/Utils.Asset"},next:{title:"Stats",permalink:"/three.ez/docs/api/classes/Utils.Stats"}},o={},d=[{value:"Methods",id:"methods",level:2},{value:"line_boxAABB",id:"line_boxaabb",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"Defined in",id:"defined-in",level:4},{value:"line_line_2D",id:"line_line_2d",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Defined in",id:"defined-in-1",level:4},{value:"line_line_3D",id:"line_line_3d",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Defined in",id:"defined-in-2",level:4},{value:"segment_boxAABB",id:"segment_boxaabb",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Defined in",id:"defined-in-3",level:4},{value:"segment_segment_2D",id:"segment_segment_2d",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Defined in",id:"defined-in-4",level:4}],s={toc:d},m="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/three.ez/docs/api/namespaces/Utils"},"Utils"),".IntersectionUtils"),(0,r.kt)("p",null,"Class that provides a set of utilities for calculating intersections between 2D and 3D geometric objects."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("h3",{id:"line_boxaabb"},"line","_","boxAABB"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("strong",{parentName:"p"},"line_boxAABB"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"rayOrigin"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"rayDir"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"box"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Checks if a 3D line intersects an Axis-Aligned Bounding Box (AABB) defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"box"),"."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"rayOrigin")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Vector3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The origin of the line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"rayDir")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Vector3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The direction of the line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"box")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Box3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The AABB to check for intersection with.")))),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the line intersects the AABB, otherwise ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h4",{id:"defined-in"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/agargaro/three.ez/blob/0cfd3b3/src/utils/IntersectionUtils.ts#L103"},"src/utils/IntersectionUtils.ts:103")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"line_line_2d"},"line","_","line","_","2D"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("strong",{parentName:"p"},"line_line_2D"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"a1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"a2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"target?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector3")),(0,r.kt)("p",null,"Computes the intersection between two 2D lines defined by points ",(0,r.kt)("inlineCode",{parentName:"p"},"a1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"a2"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"b1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b2"),"."),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"a1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"VectorObject3D")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point of the first line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"a2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"VectorObject3D")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point of the first line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"b1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"VectorObject3D")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point of the second line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"b2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"VectorObject3D")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point of the second line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Vector3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(Optional) The vector to store the intersection point. If omitted, a new vector will be created.")))),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Vector3")),(0,r.kt)("p",null,"The intersection point of the two lines or ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," if the lines are parallel."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://paulbourke.net/geometry/pointlineplane/"},"https://paulbourke.net/geometry/pointlineplane/")),(0,r.kt)("h4",{id:"defined-in-1"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/agargaro/three.ez/blob/0cfd3b3/src/utils/IntersectionUtils.ts#L22"},"src/utils/IntersectionUtils.ts:22")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"line_line_3d"},"line","_","line","_","3D"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("strong",{parentName:"p"},"line_line_3D"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"a1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"a2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"target?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tolerance?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector3")),(0,r.kt)("p",null,"Computes the intersection between two 3D lines defined by points ",(0,r.kt)("inlineCode",{parentName:"p"},"a1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"a2"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"b1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b2"),"."),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"a1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ObjVec3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point of the first line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"a2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ObjVec3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point of the first line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"b1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ObjVec3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point of the second line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"b2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"ObjVec3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point of the second line.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Vector3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(Optional) The vector to store the intersection point. If omitted, a new vector will be created.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"tolerance")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(Optional) The tolerance for evaluating the intersection. The default value is 10^-6.")))),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Vector3")),(0,r.kt)("p",null,"The intersection point of the two lines or ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," if the lines are parallel or do not intersect."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://paulbourke.net/geometry/pointlineplane/"},"https://paulbourke.net/geometry/pointlineplane/")),(0,r.kt)("h4",{id:"defined-in-2"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/agargaro/three.ez/blob/0cfd3b3/src/utils/IntersectionUtils.ts#L65"},"src/utils/IntersectionUtils.ts:65")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"segment_boxaabb"},"segment","_","boxAABB"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("strong",{parentName:"p"},"segment_boxAABB"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"box"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,"Checks if a 3D line segment defined by points ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"p2")," intersects an Axis-Aligned Bounding Box (AABB) defined by ",(0,r.kt)("inlineCode",{parentName:"p"},"box"),"."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"p1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Vector3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point of the segment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"p2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Vector3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point of the segment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"box")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Box3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The AABB to check for intersection with.")))),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"boolean")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the segment intersects the AABB and is within the segment's length, otherwise ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h4",{id:"defined-in-3"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/agargaro/three.ez/blob/0cfd3b3/src/utils/IntersectionUtils.ts#L160"},"src/utils/IntersectionUtils.ts:160")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"segment_segment_2d"},"segment","_","segment","_","2D"),(0,r.kt)("p",null,"\u25b8 ",(0,r.kt)("inlineCode",{parentName:"p"},"Static")," ",(0,r.kt)("strong",{parentName:"p"},"segment_segment_2D"),"(",(0,r.kt)("inlineCode",{parentName:"p"},"a1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"a2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"b2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"target?"),"): ",(0,r.kt)("inlineCode",{parentName:"p"},"Vector3")),(0,r.kt)("p",null,"Computes the intersection between two 2D line segments defined by points ",(0,r.kt)("inlineCode",{parentName:"p"},"a1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"a2"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"b1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b2"),"."),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"a1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"VectorObject3D")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point of the first segment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"a2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"VectorObject3D")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point of the first segment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"b1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"VectorObject3D")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The first point of the second segment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"b2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"VectorObject3D")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The second point of the second segment.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"target")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"Vector3")),(0,r.kt)("td",{parentName:"tr",align:"left"},"(Optional) The vector to store the intersection point. If omitted, a new vector will be created.")))),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Vector3")),(0,r.kt)("p",null,"The intersection point of the two segments or ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined")," if the segments do not intersect."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"strong"},"See"))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://paulbourke.net/geometry/pointlineplane/"},"https://paulbourke.net/geometry/pointlineplane/")),(0,r.kt)("h4",{id:"defined-in-4"},"Defined in"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/agargaro/three.ez/blob/0cfd3b3/src/utils/IntersectionUtils.ts#L42"},"src/utils/IntersectionUtils.ts:42")))}k.isMDXComponent=!0}}]);