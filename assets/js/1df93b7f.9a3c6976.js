"use strict";(self.webpackChunkthree_ez_doc=self.webpackChunkthree_ez_doc||[]).push([[3237],{2833:(e,t,n)=>{n.r(t),n.d(t,{default:()=>p});var a=n(7294),i=n(6010),r=n(9962),l=n(6931),s=n(7462);const o={features:"features_t9lD",featureSvg:"featureSvg_GfXr"},c=[{title:"Automatic Resize Handling",description:a.createElement(a.Fragment,null,"Automatically resizes `Renderer`, `Camera`, `EffectComposer`. Using `rendererResize` event is also possibile to set resolution for custom shaders.")},{title:"Smart Rendering",description:a.createElement(a.Fragment,null,"Smart rendering allows a frame to render only when it is needed, which is particularly useful when using mostly static scenes, optimizing performance and reducing unnecessary computational overhead. ",a.createElement("br",null),"It is based on a `Scene` property called `needsRender`, which is changed automatically when there is a change in position, scale, rotation, visiblity, focus, removal or addition of `Object3D`. It is also possible to change it manually, in cases where changes are not automatically identified.")},{title:"Simplified Rendering",description:a.createElement(a.Fragment,null,"The rendering of viewports is handled by the `Main` class, using the `createView` method, which returns an instance of `RenderView`. ",a.createElement("br",null),"By modifying the various properties of this instance, various parameters can be changed, including: the size, position, background, interaction state, and visibility. It is also possible to specify an `EffectComposer` for each RenderView to handle post-processing effects.")},{title:"Object3D Property Binding",description:a.createElement(a.Fragment,null,"It is possible to bind to a property of an `Object3D` the result of a callback, using the `bindProperty` method. ",a.createElement("br",null),"The bindings are computed automatically during each animate cycle. To manually compute the various bindings using the `setManualDetectionMode` and `detectChanges` methods.")},{title:"Event Programming",description:a.createElement(a.Fragment,null,"It facilitates interaction with `Object3D` by adding a series of programmable events. ",a.createElement("br",null),"Interaction events work similarly to DOM events, with the same propagation and methods such as `preventDefault` or `stopPropagation`. ",a.createElement("br",null))},{title:"Focus and Blur",description:a.createElement(a.Fragment,null,"Implements focus handling and related events to handle certain interactions more easily. ",a.createElement("br",null),"By setting the value of the `focusable` property of an `Object3D` you can determine whether it can receive focus.")},{title:"Drag and Drop",description:a.createElement(a.Fragment,null,"Implements drag and drop handling and related events by adding two properties to each `Object3D`: ",a.createElement("br",null),"`draggable`: makes an object draggable. ",a.createElement("br",null),"`findDropTarget`: determines whether intersections with drop targets will be checked during dragging. ",a.createElement("br",null),"The drag can be cancelled by pressing 'Esc'.")},{title:"Hitbox Functionality",description:a.createElement(a.Fragment,null,"Hitboxes can be used to handle a different intersection area or to simplify intersection calculations.")},{title:"Raycasting Options",description:a.createElement(a.Fragment,null,"It is possible to choose between continuous raycasting (every frame) or raycasting only during mouse movement, providing the flexibility to optimise raycasting operations according to application requirements. ",a.createElement("br",null),"In addition, it is possible to choose which objects can be intersected, setting `interceptByRaycaster` property.")},{title:"Tweening",description:a.createElement(a.Fragment,null,"Implements smooth animations effortlessly with built-in tweening functionality. `Vector3`, `Euler`, `Quaternion`, `Color` are supported.")},{title:"Simplified InstancedMesh",description:a.createElement(a.Fragment,null,"With the class `InstancedMesh2` it is possible to handle each sub-entity of an `InstancedMesh` as if it were an `Object3D`. This makes development much simpler and more intuitive.")}];function m(e){let{title:t,Svg:n=null,description:r}=e;return a.createElement("div",{className:(0,i.Z)("col col--4")},a.createElement("div",{className:"text--center"},n&&a.createElement(n,{className:o.featureSvg,role:"img"})),a.createElement("div",{className:"text--center padding-horiz--md"},a.createElement("h3",null,t),a.createElement("p",null,r)))}function d(){return a.createElement("section",{className:o.features},a.createElement("div",{className:"container"},a.createElement("div",{className:"row"},c.map((e=>a.createElement(m,(0,s.Z)({key:e.title},e)))))))}const u={heroBanner:"heroBanner_qdFl",buttons:"buttons_AeoN"};function h(){const{siteConfig:e}=(0,r.Z)();return a.createElement("header",{className:(0,i.Z)("hero hero--primary",u.heroBanner)},a.createElement("div",{className:"container"},a.createElement("h1",{className:"hero__title"},e.title),a.createElement("p",{className:"hero__subtitle"},e.tagline)))}function p(){const{siteConfig:e}=(0,r.Z)();return a.createElement(l.Z,{title:`${e.title}`,description:`${e.tagline}`},a.createElement(h,null),a.createElement("main",null,a.createElement(d,null)))}}}]);