"use strict";(self.webpackChunkthree_ez_doc=self.webpackChunkthree_ez_doc||[]).push([[6891],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=a,f=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3535:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(4137));const i={sidebar_position:1},o="Miscellaneous",l={unversionedId:"tutorial/events/misc",id:"tutorial/events/misc",title:"Miscellaneous",description:"This category encompasses animation and resize events.",source:"@site/docs/tutorial/events/misc.md",sourceDirName:"tutorial/events",slug:"/tutorial/events/misc",permalink:"/three.ez/docs/tutorial/events/misc",draft:!1,editUrl:"https://github.com/agargaro/three.ez/tree/master/docs/docs/tutorial/events/misc.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Interaction",permalink:"/three.ez/docs/tutorial/events/interaction"},next:{title:"Update",permalink:"/three.ez/docs/tutorial/events/update"}},s={},p=[{value:"Example",id:"example",level:2}],m={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"miscellaneous"},"Miscellaneous"),(0,a.kt)("p",null,"This category encompasses animation and resize events. ",(0,a.kt)("br",null),"\nIt's important to note that unlike ",(0,a.kt)("inlineCode",{parentName:"p"},"interaction events"),", misc events do not follow a propagation system."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u2139\ufe0f ",(0,a.kt)("strong",{parentName:"p"},"Note")," ",(0,a.kt)("br",null),"\nAnimation events are exclusively triggered for ",(0,a.kt)("strong",{parentName:"p"},"visible scenes"),".")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Event"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Parameters"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"viewportresize")),(0,a.kt)("td",{parentName:"tr",align:null},"Triggered on first render and every time an object is rendered with a different viewport size than the previous one."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"../../api/interfaces/Events.ViewportResizeEvent"},"ViewportResizeEvent"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"beforeanimate")),(0,a.kt)("td",{parentName:"tr",align:null},"Triggered every frame just before ",(0,a.kt)("inlineCode",{parentName:"td"},"animate"),".",(0,a.kt)("br",null)," Typically used for preparing object animations."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"../../api/interfaces/Events.AnimateEvent"},"AnimateEvent"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"animate")),(0,a.kt)("td",{parentName:"tr",align:null},"Triggered every frame for animating objects."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"../../api/interfaces/Events.AnimateEvent"},"AnimateEvent"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"afteranimate")),(0,a.kt)("td",{parentName:"tr",align:null},"Triggered every frame immediately after ",(0,a.kt)("inlineCode",{parentName:"td"},"animate"),".",(0,a.kt)("br",null)," Often used for post-animation operations."),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("a",{parentName:"td",href:"../../api/interfaces/Events.AnimateEvent"},"AnimateEvent"))))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const box = new Mesh(new BoxGeometry(), new MeshLambertMaterial());\n\nbox.on('viewportresize', (e) => {\n    console.log(`New viewport size: ${e.width} - ${e.height} / Camera: ${e.camera}`);\n});\n\nbox.on('beforeanimate', (e) => {\n    console.log(`Before animate - Delta: ${e.delta} - Total: ${e.total}`);\n});\n\nbox.on('animate', (e) => {\n    console.log(`Animate - Delta: ${e.delta} - Total: ${e.total}`);\n});\n\nbox.on('afteranimate', (e) => {\n    console.log(`After animate - Delta: ${e.delta} - Total: ${e.total}`);\n});\n")))}d.isMDXComponent=!0}}]);